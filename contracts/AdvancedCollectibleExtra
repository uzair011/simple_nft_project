// This is an NFT contract, the tokenURI can be one of the 3 NFT's
//and it will get selected randomly.

// SPDX-License-Identifier: MIT

pragma solidity 0.6.6;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@chainlink/contracts/src/v0.6/VRFConsumerBase.sol";

contract AdvancedCollectible is ERC721, VRFConsumerBase {
    uint256 public tokenCounter;
    bytes32 public keyhash;
    uint256 public fee;

    enum Breed {
        PUG,
        SHIBA_INU,
        ST_BERNERD
    }

    mapping(uint256 => Breed) public tokenIdToBreed;
    mapping(bytes32 => address) public requestIdToSender;
    mapping(bytes32 => string) public requestIdToTokenURI;
    mapping(bytes32 => uint256) public requestIdToTokenId;

    event requestedCollectible(bytes32 indexed requestId, address requester);
    event ReturnedCollectible(bytes32 indexed requestId, uint256 randomNumber);
    event breedAssigned(uint256 indexed tokenId, Breed breed);

    constructor(
        address _vrfCoordinator,
        address _linkToken,
        bytes32 _keyhash
    )
        public
        //uint256 _fee
        VRFConsumerBase(_vrfCoordinator, _linkToken)
        ERC721("happyDog", "DOG")
    {
        tokenCounter = 0;
        keyhash = _keyhash;
        fee = 0.1 * 10**18;
    }

    function createCollectible(string memory tokenURI)
        public
        returns (bytes32)
    {
        bytes32 requestId = requestRandomness(keyhash, fee);
        requestIdToSender[requestId] = msg.sender;
        requestIdToTokenURI[requestId] = tokenURI; //////// here...
        emit requestedCollectible(requestId, msg.sender);
    }

    function fulfillRandomness(bytes32 requestId, uint256 randomNumber)
        internal
        override
    {
        address owner = requestIdToSender[requestId];
        string memory tokenURI = requestIdToTokenURI[requestId];
        uint256 newItemId = tokenCounter;
        _safeMint(owner, newItemId);
        _setTokenURI(newItemId, tokenURI);
        Breed breed = Breed(randomNumber % 3);
        tokenIdToBreed[newItemId] = breed;
        requestIdToTokenURI[requestId] = newItemId;
        tokenCounter = tokenCounter + 1;
        //emit breedAssigned(newTokenId, breed);
        emit ReturnedCollectible(requestId, randomNumber);
    }

    function setTokenURI(uint256 tokenId, string memory _tokenURI) public {
        // pug shiba-inu, st-bernard
        require(
            _isApprovedOrOwner(_msgSender(), tokenId),
            "ERC721: caller isn't owner, no approved..."
        );
        _setTokenURI(tokenId, _tokenURI);
    }
}
